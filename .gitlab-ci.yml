---
image: danischm/nac:0.1.5
stages:
  - setup
  - validate
  - deploy
  - test
  - notify

variables:
  GIT_SSL_NO_VERIFY: "true"
  ND_HOST:
    description: "Cisco ND HOST"
  ND_DOMAIN:
    description: "Cisco ND Domain"
  ND_USERNAME:
    description: "Cisco ND Username"
  ND_PASSWORD:
    description: "Cisco ND Password"
  NDFC_SW_USERNAME:
    description: "Cisco NDFC Switch Username"
  NDFC_SW_PASSWORD:
    description: "Cisco NDFC Switch Password"
  WEBEX_ROOM_ID:
    description: "Cisco Webex Room ID"
  WEBEX_TOKEN:
    description: "Cisco Webex Bot Token"

cache:
  paths:
    - .pip_cache/

setup:
  stage: setup
  script:
    - echo "Setting up environment..."
    - pip install --cache-dir .pip_cache -r requirements.txt --force-reinstall
    - ansible-galaxy collection install -U -f -p ./collections/ansible_collections/ -r requirements.yaml
  artifacts:
    paths:
      - collections/ansible_collections/

validate:
  stage: validate
  script:
    - set -o pipefail && iac-validate ./host_vars/nac-fabric1 -s ./schema.yaml -r ./collections/ansible_collections/cisco/nac_dc_vxlan/roles/validate/files/rules/ --non-strict |& tee validate_output.txt
  artifacts:
    paths:
      - validate_output.txt
      - collections/ansible_collections/
  cache: []
  needs:
    - setup
  dependencies:
    - setup
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE != "schedule"


deploy:
  stage: deploy
  script:
    - pip install --cache-dir .pip_cache -r requirements.txt --force-reinstall
    - set -o pipefail && ansible-playbook -i inventory.yaml vxlan.yaml |& tee deploy_output.txt
  artifacts:
    when: always
    paths:
      - deploy_output.txt
  cache: []
  needs:
    - validate
    - setup
  dependencies:
    - validate
    - setup
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "main"


test-integration:
  stage: test
  script:
    - set -o pipefail && iac-test -d ./host_vars/nac-fabric1/ -d ./defaults.yaml -t ./tests/templates/ -o ./tests/results/ndfc|& tee test_output.txt
  artifacts:
    when: always
    paths:
      - tests/results/ndfc/*.html
      - tests/results/ndfc/xunit.xml
      - test_output.txt
    reports:
      junit: tests/results/ndfc/xunit.xml
  dependencies:
    - setup
    - deploy
  needs:
    - setup
    - deploy
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH =="main"

failure:
  stage: notify
  script:
    - python3 .ci/webex-notification-gitlab.py -f
  when: on_failure
  artifacts:
    when: always
    paths:
      - tests/results/ndfc/*.html
      - tests/results/ndfc/xunit.xml
      - validate_output.txt
      - test_output.txt
  cache: []

success:
  stage: notify
  script:
    - python3 .ci/webex-notification-gitlab.py -s
  when: on_success
  artifacts:
    when: always
    paths:
      - tests/results/ndfc/*.html
      - tests/results/ndfc/xunit.xml
      - plan.txt
      - fmt_output.txt
      - validate_output.txt
      - test_output.txt
  cache: []